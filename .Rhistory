source("http://raw.githubusercontent.com/cwendorf/DEVISE/main/source-DEVISE.R")
# R | Data Analysis
Outcome <- c(0,0,3,5,4,7,4,9)
DescriptivesData <- data.frame(Outcome)
## Descriptives
###  Frequency Distribution
FrequencyTable <- table(Outcome)
FrequencyTable
prop.table(FrequencyTable)
### Descriptive Statistics
mean(Outcome)
var(Outcome)
sd(Outcome)
library(DEVISE)
Factor <- c(rep(1, 10), rep(2, 10), rep(3, 10))
Factor <- factor(Factor, levels = c(1, 2, 3), labels = c("Level1", "Level2", "Level3"))
Outcome <- c(6, 8, 6, 8, 10, 8, 10, 9, 8, 7, 7, 13, 11, 10, 13, 8, 11, 14, 12, 11, 9, 16, 11, 12, 15, 13, 9, 14, 11, 10)
OneWayData <- construct(Factor, Outcome)
c(Factor,Outcome) |> construct()
Outcomw |> construct()
Outcome |> construct()
(Outcome~Factor) |> assign(OneWayData)
asg <- function(value, name) {
assign(value, name, envir = .GlobalEnv)
invisible(name)
}
(Outcome~Factor) |> asg(OneWayData)
Outcome~Factor
is.formula
asg <- function(x, ...) {
UseMethod("asg")
}
asg.default <- function(...) {
data.frame(...)
}
asg.formula <- function(formula, name, ...) {
value <- data.frame(formula)
assign(value, name, envir = .GlobalEnv)
invisible(name)
}
(Outcome~Factor) |> asg(OneWayData)
model.frame(Outcome~Factor)
data.frame(Outcome~Factor)
asg <- function(x, ...) {
UseMethod("asg")
}
asg.default <- function(...) {
data.frame(...)
}
asg.formula <- function(formula, name, ...) {
value <- model.frame(formula)
assign(value, name, envir = .GlobalEnv)
invisible(name)
}
(outcome~Factor) |> asg(OneWayData)
(Outcome~Factor) |> asg(OneWayData)
asg.formula <- function(formula, name, ...) {
value <- model.frame(formula)
return(value)
}
(Outcome~Factor) |> asg(OneWayData)
(Outcome~Factor) |> asg(OneWayData) |> assign(One)
(Outcome~Factor) |> asg(OneWayData)
assign(OneWayData,One,envir= .GlobalEnv)
OneWayData
assign(One,OneWayData,envir = .GlobalEnv)
a <- 1:4
assign("a[1]", 2)
a
a <- 1:4
a
assign(a[1],2)
asg <- function(x, ...) {
UseMethod("asg")
}
asg.default <- function(...) {
data.frame(...)
}
asg.formula <- function(formula, name, ...) {
value <- model.frame(formula)
assign(value, name, envir = .GlobalEnv)
invisible(name)
}
(Outcome~Factor) |> asg("One")
One
create_named_object <- function(name, value) {
assign(name, value, envir = .GlobalEnv)
invisible(name)
}
create_named_object("One",Outcome)
One
install.packages('jmvconnect')
library(DEVISE)
Factor <- c(rep(1, 10), rep(2, 10), rep(3, 10))
Factor <- factor(Factor, levels = c(1, 2, 3), labels = c("Level1", "Level2", "Level3"))
Outcome <- c(6, 8, 6, 8, 10, 8, 10, 9, 8, 7, 7, 13, 11, 10, 13, 8, 11, 14, 12, 11, 9, 16, 11, 12, 15, 13, 9, 14, 11, 10)
OneWayData <- construct(Factor, Outcome)
(Outcome ~ Factor) |> describeMoments()
aggregate(Outcome~Factor, FUN=function(x) c(mean,sd))
load("C:/Users/cwendorf/Desktop/BivariateData.rda")
View(BivariateData)
install.packages("httpgd")
install.packages("languageserver")
remotes::install_github("nx10/httpgd")
remotes::install_github("nx10/httpgd")
install.packages("httpgd")
remotes::install_github("nx10/httpgd")
ci_from_p = function(diff,
p_value,
ci = 0.95) {
validate_args(match.call(),
list(val_arg(diff, c('num')),
val_arg(p_value, c('num'))))
diff = as.numeric(as.character(diff))
p_value = as.numeric(as.character(p_value))
z_norm = -0.862 + sqrt(0.743 - 2.404 * log(p_value))
diff_se = abs(diff / z_norm)
z_c = stats::qnorm(1 - (1 - ci) / 2)
low = diff - diff_se * z_c
upp = diff + diff_se * z_c
return(c(ci_lower = low, ci_upper = upp))
}
ci_from_p(3,.05)
install.packages("ggplot2")
data <- data.frame(group = rep(1:2, 20))
data$response <- 4 + data$group * 2 + rnorm(20)
model <- lm(response ~ factor(group), data = data)
coeff <- model$coeff
ymin <- min(data$response)
ymax <- max(data$response)
height_of_plot <- ymax-ymin
group0_fraction <- (coef(model)[1] - ymin)/height_of_plot
diff_min <- - height_of_plot * group0_fraction
diff_max <- (1 - group0_fraction) * height_of_plot
diff <- confint(model)[2,]
# Vertical Plot
layout_mat <- matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE)
layout(mat = layout_mat, heights = 5, widths = c(3, 2), respect =TRUE)
stripchart(data$response~data$group,xlim=c(.5,2.5),ylim=c(ymin,ymax),pch=16,vertical=TRUE,method="jitter",ylab="Response",xlab="Groups")
#grid(col = "lightgray", lty = "solid")
abline(h=coeff[1],lty=2)
plot(coeff[2],xlim=c(.5,1.5),ylim=c(diff_min,diff_max),xlab="Comparison",ylab="Difference",xaxt="n",pch=16,cex=1.5)
#grid(col = "lightgray", lty = "solid")
lines(c(1,1),c(diff[1],diff[2]),lwd=3)
abline(h=0,lty=2)
title("Minimalist Gardner-Altman Plot", line = -2, outer = TRUE)
layout_mat <- matrix(c(1,2), nrow = 2, ncol = 1, byrow = TRUE)
layout(mat = layout_mat, widths = 5, heights = c(3, 2))
par(mar = c(4, 5, 4, 2))
stripchart(data$response~data$group, ylim = c(2.5,.5), xlim = c(ymin,ymax), pch = 16, vertical = FALSE, method = "jitter", xlab = "Response", ylab = "Groups")
abline(v = coeff[1], lty = 2)
par(mar = c(6, 5, 2, 2))
plot(coeff[2], ylim = c(.5, 1.5), xlim = c(diff_min, diff_max), ylab = "Comparison", xlab = "Difference", yaxt = "n", pch = 16, cex = 1.5)
lines(c(diff[1], diff[2]), c(1, 1), lwd = 3)
abline(v = 0, lty = 2)
title("Minimalist Gardner-Altman Plot", line = -2, outer = TRUE)
if (!require(remotes)) install.packages("remotes")
remotes::install_github("cwendorf/simplePipes")
library(simplePipes)
variable <- c(1, 2, 6, 8, 9, 15)
c(1, 2, 6, 8, 9, 15) -> variable
mean(variable)
variable |> mean()
variable %>% mean()
library("simplePipes")
setwd("C:/Users/cwendorf/OneDrive - UWSP/GitHub/simplePipes")
devtools::document()
devtools::document()
rlang::last_trace()
devtools::document()
library("simplePipes")
remove.packages("simplePiples")
remove.packages("simplePipes")
